# Default data folder
rmc.datafolder="plugins/remoteconsole/"
# Path to the servers logfiles. Will be used for searching the logs.
rmc.logs.path="logs/"
# Will only allow connections from LAN IP ranges (192.168.x.x, 10.x.x.x, 127.x.x.x)
rmc.LANOnly=false
# Will only allow connections from VM IP ranges (10.x.x.x, 127.x.x.x)
rmc.VMOnly=false
# Will only allow connections from local IPs (127.x.x.x) - These ones are overriding bottom to top. If localOnly is set, it will override the other two settings.
rmc.localOnly=false
# Will disable the local join override permission. If not set, 127.0.0.1 will ALWAYS be able to connect
rmc.noLocal=false
# Will allow localhost connections to authenticate as any user without a password. Meant for debug purposes only. HANDLE WITH CARE!
rmc.localnoauth=false
# Will only allow connections from certain IP ranges.
# Exmaples:
# [] - IP whitelist disabled. Allow all connections.
# If only negative IPs are added or the entire list is prefixed with an !, the whitelist will act as a blacklist, allowing everything except the listed IPs:
# !["127.0.0.1", "192.168.1.*"] - Acts as blacklist, allows everyone except localhost and 192.168.1.xxx
# ["!127.0.0.1", "!192.168.1.*"] - Same as above, just more complicated. Useful if you want to combine white and blacklist.
# ["192.168.1.*"] - Allows connections from all IPs starting with 192.168.1
rmc.whitelist=[]
# ["192.168.[1-3].*", "192.168.5.*", "!192.168.1.1"] - Allows for all IPs that are in the following range:
# 192.168.1.*, 192.168.2.*, 192.168.3.*, 192.168.5.* - but blocks 192.168.1.1 specifically. Overrides right to left -> if you allow a range, then block a certain IP it will block that IP. If you block a range, then allow a certain IP it will allow it. If you allow a certain IP, then block a range it will block it.
# ["192.168.[1-3,5].*","!192.168.1.1"] - same as above, just a little shorter.
# Specifies the port to bind to.
rmc.port=9000
# Enables authentication through an ingame command when the user is online.
rmc.allowignauth=true
# Compare the IPs and only allow ingame authentication if the IPs of the online user and the rmc user match.
rnc.ignauth.checkIP=true
# Enables token authentication (tokens are invalidated after first use).
rmc.allowtoken=true
# Enables google 2FA.
rmc.allow2fa=true
# Not implemented yet. Will allow the use of private/public keypairs for authentication.
rmc.allowkey=true
# Defines the token length. Will form a pattern of xxxx-xx.
rmc.tokenlenght=6
# Defines the token complexity.
# 1 = upppercase only, 2 = upper and lowercase, 3 = alphanumeric, 4 = alphanumeric and special chars.
rmc.tokencomplexity=3
# he suffix to append to displaynames for chat and commands. Will only apply if the player is not online.
rmc.suffix="&7[C]"
# Same as suffix, just as a prefix.
rmc.prefix=""

# ----- PERMISSIONS -----

# Required permission to do anything
rmc.perm="rmc"
# Node to connect to the server
rmc.perm.connect="rmc.connect"
# Node to log in - please note that people with the connect permission can still receive broadcasts that don't require a login
rmc.perm.auth="rmc.auth"
# Node to generate a one-time token ingame
rmc.perm.gettoken="rmc.gettoken"
# Node to list all connected users
rmc.perm.list="rmc.list"

# ----- END OF CONFIG -----